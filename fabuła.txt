#include <iostream>
#include <cstring>
#include <cmath>
#include <stdexcept>

using namespace std;

class Wlasciciel {
private:
    char nazwisko[50];
public:
    Wlasciciel(const char* nazwisko_) {
        strncpy_s(nazwisko, nazwisko_, sizeof(nazwisko) - 1);
        nazwisko[sizeof(nazwisko) - 1] = '\0';
    }

    const char* getNazwisko() const { return nazwisko; }
};

class Samochod {
private:
    char rejestracjaX[4];
    unsigned int rejestracjaY;
    unsigned int przebieg;
    bool dopuszczonyDoJazdy;
    Wlasciciel wlasciciel;
    static unsigned int ostatniNumerRejestracyjny;

    bool czyPoprawnaRejestracjaXXX(const char* rejestracjaX) {
        if (strlen(rejestracjaX) != 3) return false;
        for (int i = 0; i < 3; ++i) {
            if (!isalpha(rejestracjaX[i])) return false;
        }
        return true;
    }

public:
    Samochod(const char* rejestracjaX_, unsigned int przebieg_, bool dopuszczonyDoJazdy_, const Wlasciciel& wlasciciel_)
        : przebieg(przebieg_), dopuszczonyDoJazdy(dopuszczonyDoJazdy_), wlasciciel(wlasciciel_) {
        if (!czyPoprawnaRejestracjaXXX(rejestracjaX_)) {
            throw invalid_argument("Nieprawidłowy format rejestracji XXX");
        }
        strncpy_s(rejestracjaX, rejestracjaX_, 3);
        rejestracjaX[3] = '\0';
        rejestracjaY = ++ostatniNumerRejestracyjny;
    }

    char* getRejestracja() const {
        char* rejestracja = new char[10]; // 3 + 1 + 5 + 1 = 10 (XXX-YYYYY\0)
        sprintf_s(rejestracja, 10, "%s-%05u", rejestracjaX, rejestracjaY);//"%s" - wstawienie ciągu znaków, "-" - myślnik, "%05u" - liczba bez znaku z wyrównaniem do 5 cyfr
        return rejestracja;
    }

    void setRejestracjaXXX(const char* rejestracjaX_) {
        if (!czyPoprawnaRejestracjaXXX(rejestracjaX_)) {
            throw invalid_argument("Nieprawidłowy format rejestracji XXX");
        }
        strncpy_s(rejestracjaX, rejestracjaX_, 3);
        rejestracjaX[3] = '\0';
    }

    unsigned int getPrzebieg() const { return przebieg; }
    void setPrzebieg(unsigned int przebieg_) { przebieg = przebieg_; }

    bool isDopuszczonyDoJazdy() const { return dopuszczonyDoJazdy; }
    void setDopuszczonyDoJazdy(bool dopuszczonyDoJazdy_) { dopuszczonyDoJazdy = dopuszczonyDoJazdy_; }

    Wlasciciel getWlasciciel() const { return wlasciciel; }

    virtual double obliczZasieg() const { return 800.0; }

    explicit operator double() const {
        const double WAR_POCZ = 10000.0;
        double WSP_SPARW = dopuszczonyDoJazdy ? 1.0 : 0.2;
        double wartosc = (WAR_POCZ - 0.1 * przebieg) * WSP_SPARW;
        return wartosc < 400.0 ? 400.0 : wartosc;
    }

    bool operator==(const Samochod& other) const {
        return strcmp(rejestracjaX, other.rejestracjaX) == 0 && abs(static_cast<int>(przebieg - other.przebieg)) <= 10;
    }
};

unsigned int Samochod::ostatniNumerRejestracyjny = 0;

class SamochodElektryczny : public Samochod {
private:
    double stanBaterii;

public:
    SamochodElektryczny(const char* rejestracjaX_, unsigned int przebieg_, bool dopuszczonyDoJazdy_, const Wlasciciel& wlasciciel_, double stanBaterii_)
        : Samochod(rejestracjaX_, przebieg_, dopuszczonyDoJazdy_, wlasciciel_), stanBaterii(stanBaterii_) {
        if (stanBaterii_ < 0 || stanBaterii_ > 100) {
            throw invalid_argument("Nieprawidłowy stan baterii");
        }
    }

    double getStanBaterii() const { return stanBaterii; }
    void setStanBaterii(double stanBaterii_) {
        if (stanBaterii_ < 0 || stanBaterii_ > 100) {
            throw invalid_argument("Nieprawidłowy stan baterii");
        }
        stanBaterii = stanBaterii_;
    }

    double obliczZasieg() const override {
        return 2.5 * stanBaterii;
    }
};

int main() {
    try {
        Wlasciciel wlasciciel1("Kowalski");
        Samochod samochod1("ABC", 50000, true, wlasciciel1);
        Samochod samochod2("XYZ", 70000, false, wlasciciel1);

        char* rejestracja1 = samochod1.getRejestracja();
        char* rejestracja2 = samochod2.getRejestracja();

        cout << "Rejestracja Samochod1: " << rejestracja1 << endl;
        cout << "Rejestracja Samochod2: " << rejestracja2 << endl;

        samochod1.setRejestracjaXXX("XYZ");
        char* nowaRejestracja1 = samochod1.getRejestracja();
        cout << "Nowa rejestracja Samochod1: " << nowaRejestracja1 << endl;

        SamochodElektryczny samochodElektryczny("ELE", 30000, true, wlasciciel1, 75.0);
        char* rejestracjaElektryczny = samochodElektryczny.getRejestracja();
        cout << "Rejestracja SamochodElektryczny: " << rejestracjaElektryczny << endl;
        cout << "Zasięg SamochodElektryczny: " << samochodElektryczny.obliczZasieg() << " km" << endl;

        double wartoscSamochodu1 = static_cast<double>(samochod1);
        cout << "Wartość Samochod1: " << wartoscSamochodu1 << " PLN" << endl;

        cout << "Samochod1 == Samochod2: " << (samochod1 == samochod2) << endl;
        delete[] rejestracja1;
        delete[] rejestracja2;
        delete[] nowaRejestracja1;
        delete[] rejestracjaElektryczny;
    }
    catch (const exception& e) {
        cerr << "Wyjątek: " << e.what() << endl;
    }

    return 0;
}
