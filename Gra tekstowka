#include <iostream>
#include <Windows.h>
#include <iomanip>
#include <conio.h>
#include <string>
#include <cstdio>
#include <ctime>
#include <random>
#include <thread>
#include <chrono>
#include <cstdlib>

using namespace std;
bool gameover;
const int height = 20;
const int width = 30;
int continuesnake = 0; int continuettt = 0, continueguards = 0;
int snakelvl = 0;
int x, y, pointX, pointY, score;
int tailX[100], tailY[100], ntail;
enum edirection { STOP = 0, UP, DOWN, LEFT, RIGHT };
edirection dir;
void setup()
{
	srand(time(NULL));
	gameover = false;
	dir = STOP;
	x = width / 2;
	y = height / 2;
	pointX = rand() % width;
	pointY = rand() % height;
}
void draw(int points)
{
	system("cls");
	cout << "PUNKTY DO ZDOBYCIA: " << points << endl;
	cout << endl;
	cout << "AKTUALNY WYNIK: " << score << endl;
	cout << endl;
	for (int i = 0; i < width; i++)
	{
		cout << "#";
	}
	cout << endl;
	for (int i = 0; i < height; i++)
	{
		for (int j = 0; j < width; j++)
		{
			if (j == 0 || j == width - 1)
				cout << "#";
			else if (i == y && j == x)
				cout << "o";
			else if (i == pointY && j == pointX)
				cout << "*";
			else
			{
				bool print = false;
				for (int k = 0; k < ntail; k++)
				{
					if (tailX[k] == j && tailY[k] == i)
					{
						cout << "+";
						print = true;
					}
				}
				if (!print)
					cout << " ";
			}
		}
		cout << endl;
	}
	for (int i = 0; i < width; i++)
	{
		cout << "#";
	}
	cout << endl << endl;
}
void input()
{
	if (_kbhit())
	{
		switch (_getch())
		{
		case 'w':
			dir = UP;
			break;
		case 's':
			dir = DOWN;
			break;
		case 'a':
			dir = LEFT;
			break;
		case 'd':
			dir = RIGHT;
			break;
		default:
			break;
		}
	}
}
void logic(int points)
{
	int prevX = tailX[0];
	int prevY = tailY[0];
	int prev2x, prev2y;
	tailX[0] = x;
	tailY[0] = y;
	for (int i = 1; i < ntail; i++)
	{
		swap(tailX[i], prevX);
		swap(tailY[i], prevY);
	}
	switch (dir)
	{
	case UP:
		y--;
		break;
	case DOWN:
		y++;
		break;
	case LEFT:
		x--;
		break;
	case RIGHT:
		x++;
		break;
	default:
		break;
	}
	if (x<0 || x>width || y<0 || y>height)
	{
		ntail--;
		score -= 10;
		x = width / 2;
		y = height / 2;
		pointX = rand() % width;
		pointY = rand() % height;
		Beep(150, 300);
	}
	if (x == pointX && y == pointY)
	{
		ntail++;
		score += 10;
		pointX = rand() % width;
		pointY = rand() % height;
		Beep(550, 75);
	}
	if (score == points)
	{
		gameover = true;
		snakelvl++;
		score = 0;
		ntail = 0;
	}
}
char board_TTT[9] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
void show_board_TTT();
void get_TTT_player_chocie();
void get_TTT_computer_choice();
int count_boardTTT(char symbolTTC);
char check_winnerTTT();
void copmuter_vs_player();

int TTT()
{
	copmuter_vs_player();
	return 0;
}

void get_TTT_computer_choice()
{
	srand(time(0));
	int choice;
	do {
		choice = rand() % 10;
	} while (board_TTT[choice] != ' ');
	board_TTT[choice] = 'O';
}
void get_TTT_player_chocie()
{
	while (true)
	{
		cout << "Wybierz pole które chcesz zaznaczyć. (1 - 9): ";
		int choice_TTT;
		cin >> choice_TTT;
		choice_TTT--;
		if (choice_TTT < 0 || choice_TTT>8)
		{
			cout << "Wybierz pole które chcesz zaznaczyć. (1 -9): ";
		}
		else if (board_TTT[choice_TTT] != ' ')
		{
			cout << "Wybierz wolne miejsce na planszy:  ";

		}
		else
		{
			board_TTT[choice_TTT] = 'X';
			break;
		}
	}
}
void copmuter_vs_player()
{
	while (true)
	{
		system("cls");
		show_board_TTT();
		if (count_boardTTT('X') == count_boardTTT('O'))
		{
			cout << "Kolej Kyrala " << endl;
			get_TTT_player_chocie();
		}
		else
		{
			get_TTT_computer_choice();
		}
		char winner = check_winnerTTT();
		if (winner == 'X')
		{
			system("cls");
			show_board_TTT();
			cout << "Kyral wygrywa. " << endl;
			break;
		}
		else if (winner == 'O')
		{
			system("cls");
			show_board_TTT();
			cout << "Kyral przegrywa. " << endl;
			break;
		}
		else if (winner == 'D')
		{
			cout << "Remis" << endl;
			break;
		}
	}
}
int count_boardTTT(char symbol)
{
	int total_TTT = 0;
	for (int i = 0; i < 9; i++)
	{
		if (board_TTT[i] == symbol)
			total_TTT += 1;
	}
	return total_TTT;
}
char check_winnerTTT()
{
	// row
	if (board_TTT[0] == board_TTT[1] && board_TTT[1] == board_TTT[2] && board_TTT[0] != ' ')
		return board_TTT[0];
	if (board_TTT[3] == board_TTT[4] && board_TTT[4] == board_TTT[5] && board_TTT[3] != ' ')
		return board_TTT[3];
	if (board_TTT[6] == board_TTT[7] && board_TTT[7] == board_TTT[8] && board_TTT[6] != ' ')
		return board_TTT[6];
	//coulmn
	if (board_TTT[0] == board_TTT[3] && board_TTT[3] == board_TTT[6] && board_TTT[0] != ' ')
		return board_TTT[0];
	if (board_TTT[1] == board_TTT[4] && board_TTT[4] == board_TTT[7] && board_TTT[1] != ' ')
		return board_TTT[1];
	if (board_TTT[2] == board_TTT[5] && board_TTT[5] == board_TTT[8] && board_TTT[2] != ' ')
		return board_TTT[2];
	//diagonal
	if (board_TTT[0] == board_TTT[4] && board_TTT[4] == board_TTT[8] && board_TTT[0] != ' ')
		return board_TTT[0];
	if (board_TTT[2] == board_TTT[4] && board_TTT[4] == board_TTT[6] && board_TTT[2] != ' ')
		return board_TTT[2];
	//draw
	if (count_boardTTT('X') + count_boardTTT('0') < 9)
		return 'C';
	else
		return 'D';
}
void show_board_TTT()
{
	cout << "   " << "    |   " << "    |   " << endl;
	cout << "   " << board_TTT[0] << "   |   " << board_TTT[1] << "   |   " << board_TTT[2] << endl;
	cout << "   " << "    |   " << "    |   " << endl;
	cout << "----------------------" << endl;
	cout << "   " << "    |   " << "    |   " << endl;
	cout << "   " << board_TTT[3] << "   |   " << board_TTT[4] << "   |   " << board_TTT[5] << endl;
	cout << "   " << "    |   " << "    |   " << endl;
	cout << "----------------------" << endl;
	cout << "   " << "    |   " << "    |   " << endl;
	cout << "   " << board_TTT[6] << "   |   " << board_TTT[7] << "   |   " << board_TTT[8] << endl;
	cout << "   " << "    |   " << "    |   " << endl;
}
int createGuard()
{
	if (rand() % 67 < 8)
		return 11;

	else
		return 1 + rand() % 10;
}
void fighting()
{
	for (int i = 0; i < 10; i++)
	{
		cout << "*odgłosy walki*" << endl;
		Beep(90, 300);
		Sleep(150);
		system("cls");
	}

}
int guards_game(int number, int skill)
{
	srand(time(NULL));
	char enter;
	int playerAlive = true;
	int playerSkill = skill; int playerScore = 1;
	int guardCount = number; int guardKilled = 0;
	while (playerAlive && guardKilled < guardCount) {
		int guardSkill = createGuard();
		if (guardSkill > 10)
		{
			cout << endl << "Nadchodzi najsilniejszy przeciwnik uważaj..." << endl;
			Sleep(2000);
		}
		else
		{
			cout << endl << "Nadchodzi wróg..." << endl;
			Sleep(2000);
		}
		fighting();
		if (playerSkill < guardSkill)
		{
			playerAlive = false;
			cout << "Kyral i jego kompania polegli ..." << endl;
		}
		else
		{
			if (playerSkill - guardSkill > 0)
			{
				cout << "Kompania pokonała wroga..." << endl;
				playerScore = playerScore * 2;
				Sleep(2000);
			}
			else
			{
				cout << "Kompania pokonała wrogi oddział ale otrzymała spore obrażnia..." << endl;
				Sleep(2000);
			}
			guardKilled++;
		}
		cout << endl;
		Sleep(100);
	}
	if (guardKilled == guardCount)
	{
		cout << "Kyral i kompania pokonali wszystkich strażników" << endl;
		return 1;
	}
	else
	{
		cout << "Kyral i jego kompania nie żyją..." << endl;
		return 0;
	}
	cout << "Wrogowie zabici: " << guardKilled << endl;
	cout << "Wynik: " << playerScore << endl << endl;
}
void rockpaper() {

	string choices[3] = { "rock", "paper", "scissors" };

	string player_choice;

	string computer_choice;

	string result;

	do {
		system("cls");
		srand(time(NULL));
		int comp_choice = rand() % 3;
		computer_choice = choices[comp_choice];

		cout << "Choose rock, paper, or scissors: " << endl << ::endl;
		cout << "                  --------      /\\    /\\   " << endl;
		cout << "      ____        |      |      \\ \\  / /   " << endl;
		cout << "     /    \\       |      |       \\ \\/ /    " << endl;
		cout << "    /      \\      |      |        \\/\\/     " << endl;
		cout << "   /        \\     |      |       //\\/\\\\   " << endl;
		cout << "   \\        /     |      |      // /\\ \\\\  " << endl;
		cout << "    \\______/      --------      \\\\/  \\//  " << endl << endl;
		cin >> player_choice;

		if (player_choice == computer_choice) {
			result = "draw";
		}
		else if (player_choice == "rock" && computer_choice == "paper") {
			result = "you lose";
		}
		else if (player_choice == "rock" && computer_choice == "scissors") {
			result = "you win";
		}
		else if (player_choice == "paper" && computer_choice == "rock") {
			result = "you win";
		}
		else if (player_choice == "paper" && computer_choice == "scissors") {
			result = "you lose";
		}
		else if (player_choice == "scissors" && computer_choice == "rock") {
			result = "you lose";
		}
		else if (player_choice == "scissors" && computer_choice == "paper") {
			result = "you win";
		}
		cout << "Your choice: " << player_choice << endl;
		cout << "Computer's choice: " << computer_choice << endl;
		if (result == "you win")
		{
			cout << "  || || || || || " << endl;
			cout << "  \\/ \\/ \\/ \\/ \\/" << endl;

		}
		cout << "Result: " << result << endl;
		this_thread::sleep_for(chrono::seconds(3));
	} while (result != "you win");
}
int russian_roulette()
{
	setlocale(LC_CTYPE, "Polish");
	srand(time(NULL));
	int enemies = 1 + rand() % 6;
	bool game = false;
	while (!game)
	{
		int clone;
		cout << "    O     O     O     O     O    O  " << endl;
		cout << "   /|\\   /|\\   /|\\   /|\\   /|\\  /|\\  " << endl;
		cout << "   / \\   / \\   / \\   / \\   / \\  / \\  " << endl;
		cout << "  (1) (2) (3) (4) (5) (6)  " << endl << endl;
		cout << "Wybierz klona w którego chcesz strzelić: ";
		cin >> clone;
		if (clone > 6 || clone < 1)
		{
			cout << "Brakło ci strzał nie masz jak się obronić" << endl;
			game = true;
		}
		if (clone == enemies)
		{
			cout << "Trafiłes Kyrala..." << endl;
			return 0;
		}
		else
		{
			cout << "Trafiłeś klona, w wyniku czego reszta duplikatów znika" << endl;
			return 1;
		}
	}
}
void writing(string text)
{
	for (char c : text)
	{
		cout << c;
		Sleep(65);
	}
}
void pak() //czekanie na reakcje użytkownika
{
	HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE); //funkcja konieczna do kolorowania tekstu w konsoli (UCHWYT nazwa = funkcja zwracajaca uchwyt do wejscia(argument(obraz konsoli)))
	SetConsoleTextAttribute(hConsole, FOREGROUND_GREEN); //kolrowanie (obiekt, kolor, wysoka intensywnosc)
	cout << "Naciśnij dowolny przycisk, aby kontynuować...";
	_getch();
	cout << endl;
	SetConsoleTextAttribute(hConsole, FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_INTENSITY); //kolorowanie(przywracanie na biały)
}
int main()
{
	setlocale(LC_ALL, "PL-pl");
	HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
	cout << "<----------RETURN-Powrót do domu----------<                                        *[Ustaw pełny ekran]*           " << endl << endl;
	Sleep(1000);
	writing("W 1321 roku kraj Iolan został pogrążony w mroku.\nZły czarodziej Viltres wraz z swoją grupą złych czarodziejów pod nazwą Gwiazda\npróbuje przejąć władzę nad państwem Sheldon.\n");
	writing("W 1322 roku dochodzi do bitwy w pałacu króla gdzie w wyniku której ginie Nicolas ojciec Elrata, przywódca kraju Iolan.\n");
	writing("Kompania staje do walki z Gwiazdą aby powstrzymać ich przed objęciem władzy.\n");
	writing("Dochodzi do kolejnej bitwy podczas której kompania zostaje uwięziona w świecie sprzed 100 lat,\n");
	writing("aby powrócić do rzeczywistości muszą oni odnaleźć oni tajemniczy artefakt pozwalający na podróż w czasie - Kamień Natury.\n");
	writing("Docierają do ukrytego w podziemiach pańśtwa - miasta Kazordon gdzie wchowdzą do starożytnej Świątyni Harmonii, żeby odnaleźć starożytny artefakt.\n");
	cout << endl;
	pak();
	writing("Kyral łowca potworów i lider grupy walczącej z złym czarnoksiężnikiem Viltresem.\nMężczyzna lat 32, wysoki blondyn, mistrz walki mieczem o mocnej budowię.\nW wyniku eksperymentów przeprowadzonych na nim w dzieciństwie\nprzez grupę czarnoksiężników na czele której stał Viltres otrzymał on podstawowe magicze moce,\nz których czasem korzysta w walce");
	writing("Istera- lat 26 czarodziejka magii powietrza, szlachetna.\nprawa i oddana kompanii, nienawidzi czarnoksiężników.");
	writing("Elrat - 19 elf łucznik, honorowy, mądry, dołączył do kompanii\nponieważ grupa Viltresa zabiła króla jego kraju a zarazem ojca");
	cout << endl;
	pak();
	system("cls");//czyszczenie obszaru konsoli
	cout << endl;
	cout << "Wybierz historię którą chcesz poznać: " << endl;
	SetConsoleTextAttribute(hConsole, FOREGROUND_RED | FOREGROUND_GREEN);
	cout << "  +------+   +------+ " << endl;
	cout << "  | 1    |   | 2    | " << endl;
	cout << "  |      |   |      | " << endl;
	cout << "  |    o |   |    o | " << endl;
	cout << "  |      |   |      | " << endl;
	cout << "  |      |   |      | " << endl;
	cout << "  +------+   +------+ " << endl;
	SetConsoleTextAttribute(hConsole, FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_INTENSITY);
	int doors;
	cout << "Wybierz drzwi do których chcesz wejść i zatwierdź wybór enterem: ";
	cin >> doors;
	system("cls");
	switch (doors)
	{
	case 1:
	{
		writing("Kyral i jego kompania wybrali pierwsze drzwi, które prowadziły do korytarza pełnego pułapek.\n");
		writing("usieli uważać, by nie wpaść w żadną z nich, ale nie było łatwo, gdyż niektóre z nich były ukryte.\n");
		writing("Kyral szybko zorientował się, że pułapki są ustawione w taki sposób, by ich uniemożliwić przejście.\n");
		writing("Dotarłszy do pierwszego korytarza przed ich oczami okazało się, że stoi przed nimi nowe wyzwanie.\n");
		writing("Tym wyzwaniem okazał się pradawny golem mówiący w języku ludzi z Zachodnich Ziem.\n");
		writing("Warunkiem przejścia przez korytarz którego pilnował golem było zagranie z nim w prosta grę,\nw którą Kyral grał jak był dzieckiem ze swoim dziadkiem , mianowicie kółko i krzyżyk.\n");
		writing("Młody wojownik stanowczo stwierdził że to on zmierzy się z kamiennym strażnikiem w tej gre,\n ponieważ zna dobrze język ludzi Zachodu.\n");
		pak();
		TTT();
		pak();
		system("cls");
		writing("W końcu udało im się przejść przez wszystkie pułapki oraz ominąć golema,\ndotarli tuż przed wejście  do komnaty, w której znajdował się Kamień Natury.\n");
		writing("Niestety, okazało się że wejścia do komnaty pilnuję taki sam golem strażnik jak ten, którego minęli przed chwilą.\n");
		writing("Ten jednak wymagał pokonania go w grze kamień, papier, nożyce.\n");
		pak();
		rockpaper();
		writing("Po pokonaniu strażników i odzyskaniu Kamienia Natury, Kyral i jego kompania była szczęśliwa i dumna ze swojego osiągnięcia.\n");
		writing("Udało im się pokonać wszystkie przeszkody i zdobyć artefakt, który był tak potrzebny ich światu.\n");
		writing("Jednak nie było im dane cieszyć się zwycięstwem zbyt długo, ponieważ gdy wracali do swojej rzeczywistości,\nzostali zaatakowani przez potężnego wroga był to smok zwany w legendach Astarothem,\nktóry chciał zdobyć Kamień Natury dla siebie.\n");
		writing("Astaroth był bardzo silny i miał ogromne płonące miecze zamiast skrzydeł, które potrafił wymachiwać z ogromną siłą.\n");
		writing("Posiadał też potężne zaklęcia ognia, które potrafił rzucać na odległość.\n");
		writing("Kyral i jego kompania musieli walczyć z ogromnym smokiem , aby odzyskać Kamień Natury.\n");
		writing("Mimo że był to trudny przeciwnik, Kyral i jego ludzie walczyli dzielnie i z determinacją.\n");
		writing("Istera użyła swoich magicznych mocy, by osłabić smoka i odebrać mu część jego siły, ale nie było to wystarczające.\n");
		writing("Kyral nie miał wyjścia i musiał użyć swojej tajnej broni – zaklętego miecza, który był wyjątkowo ostry i potężny\n");
		writing("Udało mu się przebić obronę wroga i zranić go. \n");
		writing("Jednak Astaroth zdołał odebrać im kamień i sam przedostać się do miejsca gdzie chcieli trafić,\n z kolei kompania wraz z Kyralem na czele została w świecie cofniętym o 45 lat. \n");
		writing(" Kyral i jego kompania zaczęli szukać sposobu na powrót do swojej rzeczywistości.\n");
		writing("Wiedzieli, że muszą użyć jego mocy, aby znaleźć sposób na przeniesienie się z powrotem do swojego świata.\n");
		pak();
		system("cls");
		writing("Pierwszą osobą, do której udali się w poszukiwaniu pomocy, była staruszka,\nktóra mieszkała w małej chatce na obrzeżach miasta.\n");
		writing("Była ona znana jako wiedźma, która znała tajniki magii i potrafiła pomagać tym, którzy potrzebowali pomocy.\n");
		writing("Gdy Kyral i jego kompania przybyli do chatki staruszki, ta siedziała przed swoim domem, trzęsąc się z zimna.\n");
		writing("Kyral podszedł do niej i przedstawił się oraz opowiedział o swoich problemach.\n");
		writing("Staruszka wysłuchała go uważnie i powiedziała, że może pomóc im wrócić do ich rzeczywistości,\nale muszą za to zapłacić wysoką cenę.\n");
		cout << endl;
		writing("Kyral i jego kompania zgodzili się, byleby tylko mogli wrócić do swojego świata i powstrzymać\nViltresa przed zdobyciem władzy nad państwem Sheldon.\n");
		writing("Staruszka poprowadziła ich do swojej chatki, gdzie przygotowała specjalny eliksir,\nktóry miał ich przenieść z powrotem do ich rzeczywistości.\n");
		pak();
		system("cls");
		writing("Po wypiciu eliksiru, Kyral i jego kompania poczuła, jak ich ciała zaczynają rozpływać się w powietrzu.\n");
		writing("W końcu znaleźli się z powrotem w swoim świecie, ale byli już blisko pałacu Viltresa,\nktóry jednak po przegranej walce z Kyralem stracił wszystko co posiadał\ni został uwięziony przez Astarotha który zaczął swe panowanie w jego pałacu.\n");
		writing("Kompania razem z Kyralem na czele domyślała się już dlaczego wszystko przybrało zupełnie inną atmosferę niż \nto co znali u Viltresa.\n");
		writing("Jednak nie mieli czasu więc szybko ukryli się w cieniu,\naby nie zostać zauważonymi, i zaczęli szukać sposobu na dostanie się do środka.\n");
		cout << endl;
		writing("Po chwili szukania, znaleźli małe okienko, przez które mogli się dostać do środka pałacu.\n");
		writing("Szybko weszli przez okienko i zaczęli szukać Astarotha.\n");
		writing(" W końcu znaleźli go w sali tronowej.\n");
		cout << endl;
		writing("Kyral i jego kompania ruszyli do ataku, ale Astaroth był silny i dobrze wyszkolony w walce.\n");
		writing("Walka była zacięta, ale w końcu udało im się pokonać Astarotha i zatrzymać jego złe plany.\n");
		cout << endl;
		writing("Po pokonaniu Astarotha, Kyral i jego kompania zostali bohaterami całego królestwa.\n");
		writing("Wszyscy cieszyli się, że udało im się powstrzymać złoczyńcę i odzyskać Kamień Natury. \n");
		writing("Kyral został nagrodzony przez króla i królową,\na jego kompania otrzymała wysokie odznaczenia za swoje męstwo i odwagę.\n");
		cout << endl;
		writing("Po tych wydarzeniach, Kyral i jego kompania stali się znani i szanowani na całym świecie.\n");
		writing("Ich przygoda nie skończyła się jeszcze, bo wiedzieli,\nże zawsze będą musieli chronić swoje królestwo przed złymi siłami.\n");
		writing("Ale teraz byli silniejsi i bardziej doświadczeni, więc wiedzieli,\nże zawsze będą w stanie stawić czoła każdemu wyzwaniu, jakie przed nimi stanie.\n");
		writing(" W końcu udało im się pokonać smoka i odzyskać Kamień Natury. Był to trudny,\nale satysfakcjonujący zwycięstwo dla Kyrala i jego kompanii.\n");
		writing("Mogli cieszyć się spokojem i poczuciem spełnienia, że pomogli swojemu światu.\n");
		break;
	case 2:
	{
		writing("Kyral i jego kompania wybrali drugie drzwi, które prowadziły do labiryntu pełnego potworów.\n");
		writing("Musieli walczyć z każdym z nich, aby przejść przez labirynt,\nale byli dobrze przygotowani, gdyż Kyral był mistrzem walki mieczem,\na Istera miała magiczne moce,dzięki którym wyczarowała wielkiego powietrznego węża,\nprzy pomocy którego pokonali resztę przeciwników.\n");
		writing("Elrat również okazał się pomocny, gdyż był doskonałym łucznikiem i mógł atakować potwory z dystansu.\n");
		setup();
		while (!gameover)
		{
			draw(70);
			input();
			logic(70);
			Sleep(40);
		}
		system("cls");
		cout << "BRAWO UDAŁO CI SIĘ PRZEJŚĆ 1 POZIOM!";
		cout << endl;
		pak();
		setup();
		while (!gameover)
		{
			draw(120);
			input();
			logic(120);
			Sleep(30);
		}
		system("cls");
		cout << "BRAWO UDAŁO CI SIĘ PRZEJŚĆ 2 POZIOM!";
		cout << endl;
		pak();
		setup();
		while (!gameover)
		{
			draw(200);
			input();
			logic(200);
			Sleep(20);
		}
		system("cls");
		writing("BRAWO UDAŁO CI SIĘ POKONAĆ PRZECIWNIKÓW!\n");
		writing("Kompania może teraz bezpiecznie przejść przez labirynt.");
		cout << endl;
		pak();
		writing("W końcu udało im się dotrzeć do końca labiryntu i znaleźć Kamień Natury.\n");
		writing("Niestety, zostali zaskoczeni przez Viltresa i jego grupę, którzy byli równie zdeterminowani, aby zdobyć artefakt.\n");
		writing("Viltres chciał Kamienia Natury, ponieważ miał on magiczną moc,\nktóra pozwalała na podróż w czasie, a Viltres chciał wykorzystać tę moc,\nby zdobyć władzę nad państwem Sheldon.\n");
		writing("Kyral i jego kompania zdecydowali się na walkę, pomimo dużo liczniejszej armi Viltresa.\n");
		writing("Kyral walczył dzielnie, ale był tylko jednym człowiekiem,\na Viltres miał całą grupę złych czarodziejów za sobą.\n");
		writing("Viltres widząc, że walka nie przechodzi w pełni po jego myśli rzuca czar na Elrata ,\nktóry powoduje u młodego elfa halucynacje. \n");
		writing("Łucznik pod wpływem magii widzi wiele wersji swojego kompana Kyrala.\n");
		writing("Istera zdążyła powiedzieć Elratowi, że działanie czaru się skończy w momencie, gdy zabije jedną z fałszywych wersji wojownika.\n");
		pak();
		system("cls");
		int don;
		don = russian_roulette();
		if (don == 0)
		{
			writing("Zabiłeś prawdziwego Kyrala.\nKompania pozbawiona wodza postanawia walczyć do ostatniej kropli krwi,\nstawiają opór lecz przewaga wroga jest spora.\nElrar i Istera zostali zgładzeni, a Viltres zdobywa Kamień Natury i nie ma w krainie Sheldon nikogo,\nkto mógłby mu zagrozić.\nPrzejmuje on władzę i prowadzi krwawe, pełne chaosu i zniszczenia rządy. ");
			Sleep(3000);
			break;
		}
		writing("Czar ustąpił i cała kompania decyduje wspólnie, że dalsza walka jest bezsensowna i postanawiają uciec z pola bitwy\n");
		writing("W końcu udało im się uciec, ale Kamień Natury został zabrany przez Viltresa i jego ludzi.\n");
		pak();
		system("cls");
		writing("Kyral i jego kompania byli zdeterminowani, aby odzyskać Kamień Natury i powstrzymać\nViltresa przed zdobyciem władzy nad państwem Sheldon.\n");
		writing("Wiedzieli, że będą musieli znaleźć sposób na pokonanie Viltresa i jego ludzi, ale nie mieli pojęcia, jak to zrobić.\n");
		writing("Postanowili szukać pomocy u innych mistrzów walki i magów, być może uda im się znaleźć sposób na pokonanie Viltresa.\n");
		writing("Kyral i jego kompania zaczęli odwiedzać różne krainy, szukając pomocy u innych mistrzów walki i magów.\n");
		writing("Podczas swojej podróży spotkali wielu ciekawych ludzi, którzy oferowali im swoją pomoc i radę.\n");
		cout << endl;
		writing("Jednym z takich ludzi była starożytna wiedźma, która miała ogromną wiedzę o magicznych artefaktach i była w stanie doradzić im,\njak mogliby odzyskać Kamień Natury.\n");
		writing("Wiedźma powiedziała im, że jedynym sposobem na pokonanie Viltresa jest znalezienie tajemniczego miecza,\nktóry miał magiczną moc, pozwalającą na pokonanie każdego wroga.\n");
		writing("Kyral i jego kompania postanowili szukać tego magicznego miecza i po wielu trudach i\nniebezpieczeństwach udało im się ją znaleźć.\n");
		writing("Kiedy wrócili do świątyni, byli gotowi do ostatecznej walki z Viltresem i jego ludźmi.\n");
		pak();
		do
		{
			writing("Viltres: WYSŁAĆ WSZYSTKICH WOJOWNIKÓW!");
			Sleep(2000);
			system("cls");
			continueguards = guards_game(11, 8);
			if (continueguards == 0)
			{
				cout << "Kyral poległ i jego kompania polegi, niech spróbują jeszcze raz..." << endl;
				pak();
			}
			system("cls");

		} while (continueguards == 0);

		pak();
		system("cls");
		writing(" Walka była ciężka i trwała długo, ale Kyral i jego kompania byli dobrze przygotowani\ni dzięki magicznej mocy miecza udało im się pokonać Viltresa i jego ludzi.\n");
		writing("Odzyskali Kamień Natury i mogli wrócić do swojego kraju jako bohaterowie.\n");
		writing("determinowani, aby chronić Kamień Natury i zapobiec jego wykorzystaniu do złych celów,\nKyral i jego kompania zdecydowali się ukryć go w bezpiecznym miejscu i strzec go,\naż do końca swoich dni.\n");
		writing("Dzięki ich heroicznej misji państwo Sheldon było bezpieczne i spokojne,\na Viltres i jego złoczyńcy zostali pokonani.\n");
		break;
	}
	default:
	{
		cout << "Nie wybrałeś drzwi gra się kończy..";
		break;
	}
	}
	}
}
