#include <iostream>
#include <Windows.h>
#include <iomanip>
#include <conio.h>
#include <string>
#include <cstdio>
#include <ctime>
#include <random>
#include <thread>
#include <chrono>
#include <cstdlib>

using namespace std;
bool gameover;

const int height = 20;
const int width = 30;
int continuesnake = 0; int continuettt = 0; int continueguards = 1;
int snakelvl = 0;

int x, y, fruitX, fruitY, score;

int tailX[100], tailY[100], ntail;

enum edirection { STOP = 0, UP, DOWN, LEFT, RIGHT };
edirection dir;

void setup()
{
	srand(time(NULL));
	gameover = false;
	dir = STOP;
	x = width / 2;
	y = height / 2;
	fruitX = rand() % width;
	fruitY = rand() % height;
}
void draw(int points)
{
	system("cls");

	cout << "PUNKTY DO ZDOBYCIA: " << points << endl;
	cout << endl;
	cout << "AKTUALNY WYNIK: " << score << endl;
	cout << endl;
	for (int i = 0; i < width; i++)
	{
		cout << "#";
	}
	cout << endl;

	for (int i = 0; i < height; i++)
	{
		for (int j = 0; j < width; j++)
		{
			if (j == 0 || j == width - 1)
				cout << "#";
			else if (i == y && j == x)
				cout << "o";
			else if (i == fruitY && j == fruitX)
				cout << "*";
			else
			{
				bool print = false;
				for (int k = 0; k < ntail; k++)
				{
					if (tailX[k] == j && tailY[k] == i)
					{
						cout << "+";
						print = true;
					}

				}
				if (!print)
					cout << " ";

			}

		}

		cout << endl;
	}

	for (int i = 0; i < width; i++)
	{
		cout << "#";
	}
	cout << endl << endl;

}
void input()
{
	if (_kbhit())
	{
		switch (_getch())
		{
		case 'w':
			dir = UP;
			break;
		case 's':
			dir = DOWN;
			break;
		case 'a':
			dir = LEFT;
			break;
		case 'd':
			dir = RIGHT;
			break;
		default:
			break;
		}
	}
}
void logic(int points)
{
	int prevX = tailX[0];
	int prevY = tailY[0];
	int prev2x, prev2y;
	tailX[0] = x;
	tailY[0] = y;
	for (int i = 1; i < ntail; i++)
	{
		prev2x = tailX[i];
		prev2y = tailY[i];
		tailX[i] = prevX;
		tailY[i] = prevY;
		prevX = prev2x;
		prevY = prev2y;
	}

	switch (dir)
	{
	case UP:
		y--;
		break;
	case DOWN:
		y++;
		break;
	case LEFT:
		x--;
		break;
	case RIGHT:
		x++;
		break;
	default:
		break;
	}

	if (x<0 || x>width || y<0 || y>height)
	{
		ntail--;
		score -= 10;
		x = width / 2;
		y = height / 2;
		fruitX = rand() % width;
		fruitY = rand() % height;
	}

	if (x == fruitX && y == fruitY)
	{
		ntail++;
		score += 10;
		Beep(150, 280);
		fruitX = rand() % width;
		fruitY = rand() % height;
	}
	if (score == points)
	{
		gameover = true;
		snakelvl++;
		score = 0;
		ntail = 0;
	}


}

char board_TTT[9] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
void show_board_TTT();
void get_TTT_player_chocie();
void get_TTT_computer_choice();
int count_boardTTT(char symbolTTC);
char check_winnerTTT();
void copmuter_vs_player();

int TTT()
{
	copmuter_vs_player();
	return 0;
}

void get_TTT_computer_choice()
{
	srand(time(0));
	int choice;
	do {
		choice = rand() % 10;
	} while (board_TTT[choice] != ' ');
	board_TTT[choice] = 'O';
}
void get_TTT_player_chocie()
{
	while (true)
	{
		cout << "Wybierz pole które chcesz zaznaczyć. (1 - 9): ";
		int choice_TTT;
		cin >> choice_TTT;
		choice_TTT--;
		if (choice_TTT < 0 || choice_TTT>8)
		{
			cout << "Wybierz pole które chcesz zaznaczyć. (1 -9): ";
		}
		else if (board_TTT[choice_TTT] != ' ')
		{
			cout << "Wybierz wolne miejsce na planszy:  ";

		}
		else
		{
			board_TTT[choice_TTT] = 'X';
			break;
		}
	}
}
void copmuter_vs_player()
{
	while (true)
	{
		system("cls");
		show_board_TTT();
		if (count_boardTTT('X') == count_boardTTT('O'))
		{
			cout << "Kolej Kyrala " << endl;
			get_TTT_player_chocie();
		}
		else
		{
			get_TTT_computer_choice();
		}
		char winner = check_winnerTTT();
		if (winner == 'X')
		{
			system("cls");
			show_board_TTT();
			cout << "Kyral wygrywa. " << endl;
			continuettt++;
			break;
		}
		else if (winner == 'O')
		{
			system("cls");
			show_board_TTT();
			cout << "Kyral przegrywa. " << endl;
			break;
		}
		else if (winner == 'D')
		{
			cout << "Remis" << endl;
			break;
		}
	}
}

int count_boardTTT(char symbol)
{
	int total_TTT = 0;
	for (int i = 0; i < 9; i++)
	{
		if (board_TTT[i] == symbol)
			total_TTT += 1;
	}
	return total_TTT;
}
char check_winnerTTT()
{
	// row
	if (board_TTT[0] == board_TTT[1] && board_TTT[1] == board_TTT[2] && board_TTT[0] != ' ')
		return board_TTT[0];
	if (board_TTT[3] == board_TTT[4] && board_TTT[4] == board_TTT[5] && board_TTT[3] != ' ')
		return board_TTT[3];
	if (board_TTT[6] == board_TTT[7] && board_TTT[7] == board_TTT[8] && board_TTT[6] != ' ')
		return board_TTT[6];
	//coulmn
	if (board_TTT[0] == board_TTT[3] && board_TTT[3] == board_TTT[6] && board_TTT[0] != ' ')
		return board_TTT[0];
	if (board_TTT[1] == board_TTT[4] && board_TTT[4] == board_TTT[7] && board_TTT[1] != ' ')
		return board_TTT[1];
	if (board_TTT[2] == board_TTT[5] && board_TTT[5] == board_TTT[8] && board_TTT[2] != ' ')
		return board_TTT[2];
	//diagonal
	if (board_TTT[0] == board_TTT[4] && board_TTT[4] == board_TTT[8] && board_TTT[0] != ' ')
		return board_TTT[0];
	if (board_TTT[2] == board_TTT[4] && board_TTT[4] == board_TTT[6] && board_TTT[2] != ' ')
		return board_TTT[2];
	//draw
	if (count_boardTTT('X') + count_boardTTT('0') < 9)
		return 'C';
	else
		return 'D';
}

void show_board_TTT()
{
	cout << "   " << "    |   " << "    |   " << endl;
	cout << "   " << board_TTT[0] << "   |   " << board_TTT[1] << "   |   " << board_TTT[2] << endl;
	cout << "   " << "    |   " << "    |   " << endl;
	cout << "----------------------" << endl;
	cout << "   " << "    |   " << "    |   " << endl;
	cout << "   " << board_TTT[3] << "   |   " << board_TTT[4] << "   |   " << board_TTT[5] << endl;
	cout << "   " << "    |   " << "    |   " << endl;
	cout << "----------------------" << endl;
	cout << "   " << "    |   " << "    |   " << endl;
	cout << "   " << board_TTT[6] << "   |   " << board_TTT[7] << "   |   " << board_TTT[8] << endl;
	cout << "   " << "    |   " << "    |   " << endl;
}
int createGuard()
{
	if (rand() % 67 < 8)
		return 11;

	else
		return 1 + rand() % 10;
}
void fighting()
{
	for (int i = 0; i < 10; i++)
	{
		cout << "Fighting..." << endl;
		Sleep(150);
		system("cls");
	}

}
void guards_game(int number, int skill)
{
	srand(time(NULL));
	char enter;

	int playerAlive = true;
	int playerSkill = skill; int playerScore = 1;
	int guardCount = number; int guardKilled = 0;

	while (playerAlive && guardKilled < guardCount) {
		int guardSkill = createGuard();

		if (guardSkill > 10)
		{
			cout << endl << "Nadchodzi najsilniejszy strażnik uważaj..." << endl;
			Sleep(2000);
		}
		else
		{
			cout << endl << "Nadchodzi strażnik..." << endl;
			Sleep(2000);
		}
		fighting();

		if (playerSkill < guardSkill) 
		{
			playerAlive = false;
			cout << "Kyral zginął..." << endl;
		}

		else 
		{
		

			if (playerSkill - guardSkill > 0)
			{
				cout << "Zabiłeś strażnika..." << endl;
				playerScore = playerScore * 2;
				Sleep(2000);
			}

			else
			{
				cout << "Podołałeś strażnikowi, ale poniosłeś pewne ubytki na zdrowiu..." << endl;
				Sleep(2000);
			}

			guardKilled++;
		}

		cout << endl;
		Sleep(100);
	}
	if (guardKilled == guardCount)
	{
		cout << "Kyral pokonał wszystkich strażników" << endl;
		continueguards++;
	}
	else
	{
		cout << "Kyral nie żyje..." << endl;
		
	}

	cout << "Strażnicy zabici: " << guardKilled << endl;
	cout << "Wynik: " << playerScore << endl << endl;
}

void rockpaper(){

    std::string choices[3] = { "rock", "paper", "scissors" };

    std::string player_choice;

    std::string computer_choice;

    std::string result;

    do {
        system("cls");
        std::srand(time(NULL));
        int comp_choice = std::rand() % 3;
        computer_choice = choices[comp_choice];

        std::cout << "Choose rock, paper, or scissors: " << std::endl << std::endl;
        std::cout << "                  --------      /\\    /\\   " << std::endl;
        std::cout << "      ____        |      |      \\ \\  / /   " << std::endl;
        std::cout << "     /    \\       |      |       \\ \\/ /    " << std::endl;
        std::cout << "    /      \\      |      |        \\/\\/     " << std::endl;
        std::cout << "   /        \\     |      |       //\\/\\\\   " << std::endl;
        std::cout << "   \\        /     |      |      // /\\ \\\\  " << std::endl;
        std::cout << "    \\______/      --------      \\\\/  \\//  " << std::endl << std::endl;
        std::cin >> player_choice;

        if (player_choice == computer_choice) {
            result = "draw";
        }
        else if (player_choice == "rock" && computer_choice == "paper") {
            result = "you lose";
        }
        else if (player_choice == "rock" && computer_choice == "scissors") {
            result = "you win";
        }
        else if (player_choice == "paper" && computer_choice == "rock") {
            result = "you win";
        }
        else if (player_choice == "paper" && computer_choice == "scissors") {
            result = "you lose";
        }
        else if (player_choice == "scissors" && computer_choice == "rock") {
            result = "you lose";
        }
        else if (player_choice == "scissors" && computer_choice == "paper") {
            result = "you win";
        }

        std::cout << "Your choice: " << player_choice << std::endl;
        std::cout << "Computer's choice: " << computer_choice << std::endl;
        if (result == "you win")
        {
            std::cout << "  || || || || || " << std::endl;
        std::cout << "  \\/ \\/ \\/ \\/ \\/" << std::endl;

        }
        std::cout << "Result: " << result << std::endl;
        std::this_thread::sleep_for(std::chrono::seconds(3));
    } while (result != "you win");
}

void writing(string text)
{

	for (char c : text)
	{
		cout << c;
		Sleep(0);
	}
}

void pak() //czekanie na reakcje użytkownika
{
	HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE); //funkcja konieczna do kolorowania tekstu w konsoli (UCHWYT nazwa = funkcja zwracajaca uchwyt do wejscia(argument(obraz konsoli)))
	SetConsoleTextAttribute(hConsole, FOREGROUND_GREEN); //kolrowanie (obiekt, kolor, wysoka intensywnosc)
	cout << "Naciśnij Enter aby kontynuować...";
	_getch();
	cout << endl;
	SetConsoleTextAttribute(hConsole, FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_INTENSITY); //kolorowanie(przywracanie na biały)
}

int main()
{
	setlocale(LC_ALL, "PL-pl");
	HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
	cout << "----------RETURN-Powrót do domu----------" << endl << endl;
	system("cls");
	writing("W 1321 roku kraj Iolan został pogrążony w mroku. Zły czarodziej Viltres wraz z swoją grupą złych czarodziejów pod nazwą Gwiazda próbuje przejąć władzę nad państwem Sheldon.");
	writing("W 1322 roku dochodzi do bitwy w pałacu króla gdzie w wyniku której ginie Nicolas ojciec Elrata, przywódca kraju Iolan.");
	writing("Kompania staje do walki z Gwiazdą aby powstrzymać ich przed objęciem władzy.");
	writing("Dochodzi do kolejnej bitwy podczas której kompania zostaje uwięziona w świecie sprzed 100 lat,");
	writing(" aby powrócić do rzeczywistości muszą oni odnaleźć oni tajemniczy artefakt pozwalający na podróż w czasie - Kamień Natury.");
	writing(" Docierają do ukrytego w podziemiach pańśtwa - miasta Kazordon gdzie wchowdzą do starożytnej Świątyni Harmonii, żeby odnaleźć starożytny artefakt.");
	cout << endl;
	pak();
	writing("Kyral łowca potworów i lider grupy walczącej z złym czarnoksiężnikiem Viltresem. Mężczyzna lat 32, wysoki blondyn, mistrz walki mieczem o mocnej budowię. W wyniku eksperymentów przeprowadzonych na nim w dzieciństwie przez grupę czarnoksiężników na czele której stał Viltres otrzymał on podstawowe magicze moce, z których czasem korzysta w walce");
	writing("Istera- lat 26 czarodziejka magii powietrza, szlachetna , prawa i oddana kompanii, nienawidzi czarnoksiężników.");
	writing("Elrat - 19 elf łucznik, honorowy, mądry, dołączył do kompanii ponieważ grupa Viltresa zabiła króla jego kraju a zarazem ojca");
	cout << endl;
	pak();
	system("cls");//czyszczenie obszaru konsoli
	cout << endl;
	cout << "Wybierz historię którą chcesz poznać: " << endl;
	SetConsoleTextAttribute(hConsole, FOREGROUND_RED | FOREGROUND_GREEN);
	cout << "  +------+   +------+   +------+" << endl;
	cout << "  | 1    |   | 2    |   | 3    |" << endl;
	cout << "  |      |   |      |   |      |" << endl;
	cout << "  |    o |   |    o |   |    o |" << endl;
	cout << "  |      |   |      |   |      |" << endl;
	cout << "  |      |   |      |   |      |" << endl;
	cout << "  +------+   +------+   +------+" << endl;
	SetConsoleTextAttribute(hConsole, FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_INTENSITY);
	int doors;
	cout << "Wybierz drzwi do których chcesz wejść i zatwierdź wybór enterem: ";
	cin >> doors;
	system("cls");
	switch (doors)
	{
	case 1:
	{
		writing("Mapa którą otrzymałeś pokazuje abyś kierował się na północ w strone Mostu Zagłady,\nniestety to jedyna drogą i musisz pokonać pilnującego mostu ogra o imieniu Norbert, odwieczny rywal Greków,\nktóry za swoje zbrodnie został zesłany na nasz świat.\nAby odkupić swoje winy strzeże mostu i ci którzy z nim przegrają wracają razem z nim do krainy Orków");
		cout << endl;
		pak();
		system("cls");
		writing("Twoim zadaniem będzie pokonać Norberta zdobywając odpowiednią liczbę punktów.\nLecz uważaj strażnik jest niezwykle sprytny i za niektóre punkty trzeba będzie się poświęcić!");
		cout << endl;
		pak();
				
		setup();
				while (!gameover)
				{
					draw(10);
					input();
					logic(10);
					Sleep(10);
				}
				system("cls");
				cout << "BRAWO UDAŁO CI SIĘ PRZEJŚĆ 1 POZIOM!";
				cout << endl;
				pak();



				setup();
				while (!gameover)
				{
					draw(10);
					input();
					logic(10);
					Sleep(40);
				}
				system("cls");
				cout << "BRAWO UDAŁO CI SIĘ PRZEJŚĆ 2 POZIOM!";
				cout << endl;
				pak();
			
			
				setup();
				while (!gameover)
				{
					draw(20);
					input();
					logic(20);
					Sleep(30);
				}
				system("cls");
				cout << "BRAWO UDAŁO CI SIĘ POKONAĆ STRAŻNIKA";
				cout << endl;
				pak();
			

		writing("Możesz se przejść przez most");
		cout << endl;
		pak();
		system("cls");
		writing("Historia do ttt");
		cout << endl;
		pak();
		TTT();
		Sleep(2000);
		system("cls");
		writing("Brawo udało ci sie mnie pokonać po raz pierwszy, ciekawe czy umiesz to powtórzyć?");
		cout << endl;
		pak();
		TTT();
		Sleep(2000);
		system("cls");
		writing("Szczęście nowicjusza, każdemu może się udać");
		cout << endl;
		pak();
		TTT();
		Sleep(2000);
		system("cls");
		writing("Niestety, jesteś pierwszą osobą przez którą poległem"); //tu trzeba ustawic zeby gierka sie resetowala po wyniku bo nie da sie grac kilka razy

		writing("Historia po TTT");
		cout << endl;
		pak();


		do
		{
			writing("Król: WYSŁAĆ PIERWSZĄ FALĘ STRAŻNIKÓW!");
			Sleep(2000);
			system("cls");
			guards_game(3, 9);
			if (continueguards == 1)
			{
				cout << "Kyral poległ, niech spróbuje jeszcze raz..." << endl;
				pak();
			}
			system("cls");

		} while (continueguards == 1);

		do
		{
			writing("Król: WYSŁAĆ DRUGĄ FALĘ STRAŻNIKÓW!");
			Sleep(1000);
			cout << endl;
			writing("Tej już nie podoła...");
			Sleep(2000);
			system("cls");
			guards_game(6, 8);
			if (continueguards == 2)
			{
				cout << "Kyral poległ, niech spróbuje jeszcze raz..." << endl;
				pak();
			}
			system("cls");

		} while (continueguards == 2);

		do
		{
			writing("Król: WYSTAWIĆ JUŻ OSTATNIA PIECHOTĘ!");
			Sleep(1000);
			cout << endl;
			writing("Tylko w nich nadzieja...");
			Sleep(2000);
			system("cls");
			guards_game(9, 7);
			if (continueguards == 3)
			{
				cout << "Kyral poległ, niech spróbuje jeszcze raz..." << endl;
				pak();
			}
			system("cls");

		} while (continueguards == 3);




		break;

	}
	case 2:
	{
		cout << "Za drzwiami znajdował się eliksir babel bohaterowie wypili go i poczuli błogosławieństwo bogów zatem ruszyli dalej, na pustyni ujrzeli chate pewnego czarnoksiężnika Janusza Mekki, jednak okazało się że Kyral i jego drużyna włada innym językiem, nasi bohaterowie muszą rozwiązać zadanie nim Mekka wyjawi im jakąś wskazówkę ";
		rockpaper();
		cout<<"Niech każdy rządzi swoim życiem, a reszta niech sobie leci"
cout<<"Więc tak też postanowili zrobić, znaleźli potrzebne materiały i narzędzia i zaczęli budować maszynę latającą, co prawda kyral miał wątpliwości czy na pewno o to chodziło, ale demokratycznie zadecydowali że to na pewno dobry pomysł"
		break;
	}
	case 3:
	{
		cout << "Historia 3: ";
		break;
	}
	default:
	{
		cout << "Nie wybrałeś drzwi gra się kończy..";
		break;
	}

	}

}
