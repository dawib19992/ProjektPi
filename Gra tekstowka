#include <iostream>
#include <Windows.h>
#include <iomanip>
#include <conio.h>
#include <string>
#include <cstdio>

using namespace std;
bool gameover;

const int height = 20;
const int width = 20;
int continuesnake=0;
int snakelvl = 0;

int x, y, fruitX, fruitY, score;

int tailX[100], tailY[100], ntail;

enum edirection { STOP = 0, UP, DOWN, LEFT, RIGHT };
edirection dir;

void setup()
{
	srand(time(NULL));
	gameover = false;
	dir = STOP;
	x = width / 2;
	y = height / 2;
	fruitX = rand() % width;
	fruitY = rand() % height;
}
void draw(int points)
{
	system("cls");

	cout << "PUNKTY DO ZDOBYCIA: " << points << endl;
	cout << endl;
	cout << "AKTUALNY WYNIK: " << score << endl;
	cout << endl;
	for (int i = 0; i < width; i++)
	{
		cout << "#";
	}
	cout << endl;

	for (int i = 0; i < height; i++)
	{
		for (int j = 0; j < width; j++)
		{
			if (j == 0 || j == width-1)
				cout << "#";
			else if (i == y && j == x)
				cout << "o";
			else if (i == fruitY && j == fruitX)
				cout << "*";
			else
			{
				bool print = false;
				for (int k = 0; k < ntail; k++)
				{
					if (tailX[k] == j && tailY[k] == i)
					{
						cout << "+";
						print = true;
					}
					
				}
				if (!print)
					cout << " ";
				
			}

		}

		cout << endl;
	}

	for (int i = 0; i < width; i++)
	{
		cout << "#";
	}
	cout << endl << endl;
	
}
void input()
{
	if (_kbhit())
	{
		switch (_getch())
		{
		case 'w':
			dir = UP;
			break;
		case 's':
			dir = DOWN;
			break;
		case 'a':
			dir = LEFT;
			break;
		case 'd':
			dir = RIGHT;
			break;
		default:
			break;
		}
	}
}
void logic(int points)
{
	int prevX = tailX[0];
	int prevY = tailY[0];
	int prev2x, prev2y;
	tailX[0] = x;
	tailY[0] = y;
	for (int i = 1; i < ntail; i++)
	{
		prev2x = tailX[i];
		prev2y = tailY[i];
		tailX[i] = prevX;
		tailY[i] = prevY;
		prevX = prev2x;
		prevY = prev2y;
	}

	switch (dir)
	{
	case UP:
		y--;
		break;
	case DOWN:
		y++;
		break;
	case LEFT:
		x--;
		break;
	case RIGHT:
		x++;
		break;
	default:
		break;
	}

	if (x<0 || x>width || y<0 || y>height)
	{
		ntail--;
		score-=10;
		x = width/2;
		y = height/2;
		fruitX = rand() % width;
		fruitY = rand() % height;
	}
	
	if (x == fruitX && y == fruitY)
	{
		ntail++;
		score += 10;
		fruitX = rand() % width;
		fruitY = rand() % height;
	}
	if (score == points)
	{
		gameover = true;
		snakelvl++;
		score = 0;
		ntail = 0;
	}
		

}


void writing(string text)
{

    for (char c : text)
    {
        cout << c;
        Sleep(0);
    }
}

void pak() //czekanie na reakcje użytkownika
{
    HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE); //funkcja konieczna do kolorowania tekstu w konsoli (UCHWYT nazwa = funkcja zwracajaca uchwyt do wejscia(argument(obraz konsoli)))
    SetConsoleTextAttribute(hConsole, FOREGROUND_GREEN); //kolrowanie (obiekt, kolor, wysoka intensywnosc)
    cout << "Naciśnij Enter aby kontynuować...";
	_getch();
	cout << endl;
    SetConsoleTextAttribute(hConsole, FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_INTENSITY); //kolorowanie(przywracanie na biały)
}

int main()
{
    setlocale(LC_ALL, "PL-pl");
    HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
    cout << "----------RETURN-Powrót do domu----------" << endl << endl;
    system("cls");
    writing("W 1321 roku kraj Iolan został pogrążony w mroku. Zły czarodziej Viltres wraz z swoją grupą złych czarodziejów pod nazwą Gwiazda próbuje przejąć władzę nad państwem Sheldon.");
    writing("W 1322 roku dochodzi do bitwy w pałacu króla gdzie w wyniku której ginie Nicolas ojciec Elrata, przywódca kraju Iolan.");
    writing("Kompania staje do walki z Gwiazdą aby powstrzymać ich przed objęciem władzy.");
    writing("Dochodzi do kolejnej bitwy podczas której kompania zostaje uwięziona w świecie sprzed 100 lat,");
    writing(" aby powrócić do rzeczywistości muszą oni odnaleźć oni tajemniczy artefakt pozwalający na podróż w czasie - Kamień Natury.");
    writing(" Docierają do ukrytego w podziemiach pańśtwa - miasta Kazordon gdzie wchowdzą do starożytnej Świątyni Harmonii, żeby odnaleźć starożytny artefakt.");
    cout << endl;
    pak();
    writing("Kyral łowca potworów i lider grupy walczącej z złym czarnoksiężnikiem Viltresem. Mężczyzna lat 32, wysoki blondyn, mistrz walki mieczem o mocnej budowię. W wyniku eksperymentów przeprowadzonych na nim w dzieciństwie przez grupę czarnoksiężników na czele której stał Viltres otrzymał on podstawowe magicze moce, z których czasem korzysta w walce");
    writing("Istera- lat 26 czarodziejka magii powietrza, szlachetna , prawa i oddana kompanii, nienawidzi czarnoksiężników.");
    writing("Elrat - 19 elf łucznik, honorowy, mądry, dołączył do kompanii ponieważ grupa Viltresa zabiła króla jego kraju a zarazem ojca");
    cout << endl;
    pak();
    system("cls");//czyszczenie obszaru konsoli
    cout << endl;
    cout << "Wybierz historię którą chcesz poznać: " << endl;
    SetConsoleTextAttribute(hConsole, FOREGROUND_RED | FOREGROUND_GREEN);
    cout << "  +------+   +------+   +------+" << endl;
    cout << "  | 1    |   | 2    |   | 3    |" << endl;
    cout << "  |      |   |      |   |      |" << endl;
    cout << "  |    o |   |    o |   |    o |" << endl;
    cout << "  |      |   |      |   |      |" << endl;
    cout << "  |      |   |      |   |      |" << endl;
    cout << "  +------+   +------+   +------+" << endl;
    SetConsoleTextAttribute(hConsole, FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_INTENSITY);
    int doors;
    cout << "Wybierz drzwi do których chcesz wejść i zatwierdź wybór enterem: ";
    cin >> doors;
    system("cls");
    switch (doors)
    {
    case 1:
    {
		writing("Mapa którą otrzymałeś pokazuje abyś kierował się na północ w strone Mostu Zagłady,\nniestety to jedyna drogą i musisz pokonać pilnującego mostu ogra o imieniu Norbert, odwieczny rywal Greków,\nktóry za swoje zbrodnie został zesłany na nasz świat.\nAby odkupić swoje winy strzeże mostu i ci którzy z nim przegrają wracają razem z nim do krainy Orków");
		cout << endl;
		pak();
		system("cls");
		writing("Twoim zadaniem będzie pokonać Norberta zdobywając odpowiednią liczbę punktów.\nLecz uważaj strażnik jest niezwykle sprytny i za niektóre punkty trzeba będzie się poświęcić!");
		cout << endl;
		pak();
		do 
		{
			if (snakelvl == 0)
			{
				setup();
				while (!gameover)
				{
					draw(70);
					input();
					logic(70);
					Sleep(70);
				}
				system("cls");
				cout << "BRAWO UDAŁO CI SIĘ PRZEJŚĆ 1 POZIOM!";
				Sleep(5000);
				cout << endl;
				pak();
			}
		
			else if (snakelvl == 1)
			{
				setup();
				while (!gameover)
				{
					draw(120);
					input();
					logic(120);
					Sleep(40);
				}
				system("cls");
				cout << "BRAWO UDAŁO CI SIĘ PRZEJŚĆ 2 POZIOM!";
				Sleep(5000);
				cout << endl;
				pak();
			}
			else if (snakelvl == 2)
			{
				setup();
				while (!gameover)
				{
					draw(200);
					input();
					logic(200);
					Sleep(30);
				}
				system("cls");
				cout << "BRAWO UDAŁO CI SIĘ POKONAĆ STRAŻNIKA";
				Sleep(5000);
				cout << endl;
				pak();
			}
			
		} while (continuesnake != 3);

		writing("Możesz se przejść przez most");
		
				
		system("cls");
		cout << "Historia 1: " << endl;
		cout << endl;
		pak();
		break;
    }
    case 2:
    {
        cout << "Historia 2: ";
        break;
    }
    case 3:
    {
        cout << "Historia 3: ";
        break;
    }
    default:
    {
        cout << "Nie wybrałeś drzwi gra się kończy..";
        break;
    }

    }

}
